// SMO.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

/*
	Система Массового Обслуживания. Задачи и формулы Эрланга.

	СМО - системы, в которые в случайные моменты времени
	поступают заявки на обслуживание,
	поступившие заявки обслуживаются с помощью каналов.

	2 вида СМО:
		1. С отказами (в которых заявка, поступившая в СМО, когда все каналы заняты, получает отказ и покидает очередь)
		2. Ожидание   (в которых заявка, поступившая в СМО, когда все каналы заняты, ждёт, пока не освободится один из каналов)
			2.1 Ограниченным ожиданием (длина очереди, время пребывания в очереди)
			2.2 Неограниченным ожиданием

	Число каналов обслуживания:
		1. Одноканальные системы
		2. Многоканальные системы
			2.1 С отказами  (Интенсивность входного потока может параллельно обслуживаться не более N заявок)
			2.2 С ожиданием (Система имеет k каналов обслуживания, при этом ограничено < 1)
*/

#include <iostream>
#include <math.h>

using namespace std;

double fact(int k)
{
	if (k < 0) 
	{
		return 0; 
	}

	if (k == 0) 
	{
		return 1; 
	}
	else 
	{
		return k * fact(k - 1); // рекурсия
	}
}

int main()
{
	setlocale(LC_ALL, "rus");

	int N,	   // Число заявок в системе (кол-во)
		n = 0, // Счётчик цикла для N	
	    k = 0, // Канал
	    C = 0, // Для МСМО с ожиданием
		value; // Выбор действия

	double lambda,   // Интенсивность потока заявок (лямбда)
		   sum = 0,  // Сумма для многоканальной системы
		   Lq,	     // Среднее число заявок (клиентов) в очереди (длина очереди)
		   Ws,       // Среднее время пребывания заявки в системе
		   Wq,       // Средняя продолжительность пребывания клиента (заявки) в очереди
		   Ls,	     // Среднее кол-во находящихся в системе заявок
		   A,	     // Среднее число заявок, которое может обслужить СМО в единицу времени
		   q,	     // Пропускная способность (дельта)
		   t,	     // Среднее время обслуживания (time)
		   mu,	     // Заявки на обслуживание (мю)
		   inv_k,    // Среднее число каналов, занятых обслуживанием
		   p,	     // Среднее число заявок, приходящееся на среднее время обслуживания одной заявки (ро)
		   Pk,		 // Вероятность k заявок в системе
		   Pc,       // Для МСМО с ожиданием
		   P0 = 0,	 // Вероятность простоя СМО
		   Potk,     // Отказ в обслуживании
		   Potk_pro, // Отказ в обслуживании в %
		   Pn;       // Есть ли в системе заявки ?

	cout << "ЗадачИ Эрланга: " << endl << endl;

	cout << "1. Одноканальная  СМО c ожиданием и ограниченной очередью" << endl;
	cout << "2. Одноканальная  СМО с отказами" << endl;
	cout << "3. Одноканальная  СМО с ожиданием и неограниченной очередью" << endl;
	cout << "4. Многоканальная СМО с отказами" << endl;
	cout << "5. Многоканальная СМО с ожиданием" << endl << endl;

	cout << "Выберите один из пунктов, который вы хотите разобрать: "; cin >> value;
	cout << endl;

	switch (value)
	{
		case 1:
		{
			cout << "Рассмотрим одноканальную СМО c ожиданием и ограниченной очередью!" << endl << endl;

			cout << "Интенсивность поступления заявок в систему: "; cin >> lambda;
			cout << "Среднее время обслуживания: "; cin >> t; // Все переводи в часы!

			mu = 1 / t;
			cout << "Интенсивность обслуживания: " << mu << endl;

			cout << "Число заявок в системе: "; cin >> N;
			cout << endl;

			p = lambda / mu;
			cout << "Приведённая интенсивность потока: " << p << endl;

			P0 = (1 - p) / (1 - pow(p, N + 1));
			cout << "Вероятность того, что канал обслуживания свободен: " << P0 << endl;

			if (p == 1)
			{
				Pn = 1 / (N + 1);
				cout << "Вероятность того, что в системе находится n заявок при p = 1: " << Pn << endl;
			}
			else
			{
				for (int i = 0; i < N + 1; i++)
				{
					Pn = P0 * pow(p, n);
					cout << "Вероятность того, что в системе находится " << n << " заявок = " << Pn << endl;
					n++;
				}
				n = 0;
			}
			cout << endl;

			if (p == 1)
			{
				Pn = 1 / (N + 1);
				cout << "Вероятность отказа в обслуживании заявки при p = 1: " << Pn << endl; // Будет = вероятности состояния Pn
			}
			else
			{
				Pn = ((1 - p) / (1 - pow(p, N + 1))) * pow(p, N);
				Potk = Pn;
				cout << "Вероятность отказа в обслуживании заявки: " << Potk << endl;
			}

			if (p == 1)
			{
				q = 1 - (1 / (N + 1));
				cout << "Относительная пропускная способность при p = 1: " << q << endl;
			}
			else
			{
				q = 1 - Potk;
				cout << "Относительная пропускная способность: " << q << endl; // Будет = доли обслуженных заявок относительно всех поступющих
			}

			A = q * lambda;
			cout << "Абсолютная пропускная способность: " << A << endl << endl;

			if (p == 1)
			{
				Ls = N / 2;
				cout << "Среднее число находящихся в системе заявок при p = 1: " << Ls << endl;
			}
			else
			{
				Ls = (p * (1 - (N + 1) * pow(p, N) + N * pow(p, N + 1))) / ((1 - p) * (1 - pow(p, N + 1)));
				cout << "Среднее число находящихся в системе заявок: " << Ls << endl;
			}

			Ws = Ls / (lambda * (1 - Pn));
			cout << "Среднее время пребывания заявки в системе: " << Ws << endl;

			Wq = Ws - (1 / mu);
			cout << "Средняя продолжительность пребывания клиента (заявки) в очереди: " << Wq << endl;

			Lq = lambda * (1 - Pn) * Wq;
			cout << "Среднее число заявок (клиентов) в очереди (длина очереди): " << Lq << endl << endl;
		}
		break;

		case 2:
		{
			cout << "Рассмотрим одноканальную систему с отказами!" << endl << endl;

			cout << "Интенсивность поступления заявок в систему: "; cin >> lambda;
			cout << "Среднее время обслуживания: "; cin >> t; // Все переводи в часы!

			mu = 1 / t;
			cout << "Интенсивность обслуживания: " << mu << endl << endl;

			q = mu / (mu + lambda);
			cout << "Относительная пропускная способность: " << q << endl; // Будет = доли обслуженных заявок относительно всех поступающих заявок

			P0 = q;
			cout << "Вероятность того, что канал обслуживания свободен: " << P0 << endl;

			A = (lambda * mu) / (mu + lambda);
			cout << "Абсолютная пропускная способность: " << A << endl;
			cout << "СМО способна осуществить в среднем " << A << " обслуживания заявок в час" << endl << endl;

			Potk = lambda / (mu + lambda);
			cout << "Вероятность отказа в обслуживании заявки: " << Potk << endl; // Будет = "Канал обслуживания занят"
			Potk_pro = Potk * 100;
			cout << Potk_pro << "% прибывших заявок получат отказ в обслуживании" << endl << endl;
		}
		break;

		case 3:
		{
			cout << "Рассмотрим одноканальную систему с ожиданием и неограниченной очередью!" << endl << endl;

			cout << "Интенсивность поступления заявок в систему: "; cin >> lambda;
			cout << "Среднее время обслуживания: "; cin >> t; // Все переводи в часы!

			mu = 1 / t;
			cout << "Интенсивность обслуживания: " << mu << endl << endl;

			cout << "Число заявок в системе - Бесконечно. Но для примера, введите число: "; cin >> N;
			cout << endl;

			p = lambda / mu;
			cout << "Приведённая интенсивность потока: " << p << endl;

			P0 = 1 - p;
			cout << "Вероятность того, что канал обслуживания свободен: " << P0 << endl << endl;

			for (int i = 0; i < N + 1; i++)
			{
				Pn = (1 - p) * pow(p, n);
				cout << "Вероятность того, что в системе находится " << n << " заявок = " << Pn << endl;
				n++;
			}
			cout << endl;

			Ls = p / (1 - p);
			cout << "Среднее число находящихся в системе заявок: " << Ls << endl;

			Lq = Ls - (lambda / mu);
			cout << "Среднее число клиентов в очереди на обслуживание: " << Lq << endl;

			Ws = Ls / lambda;
			cout << "Среднее время пребывания заявки в системе: " << Ws << endl;

			Wq = Lq / lambda;
			cout << "Средняя продолжительность пребывания клиента (заявки) в очереди: " << Wq << endl << endl;

			q = 1;
			cout << "Относительная пропускная способность = доли обслуженных заявок: " << q << endl; // 1, потому что все заявки, рано или поздно будут выполнены

			A = q * lambda;
			cout << "Абсолютная пропускная способность: " << A << endl << endl;
		}
		break;

		case 4:
		{
			cout << "Рассмотрим многоканальную систему с отказами!" << endl << endl;

			cout << "Интенсивность поступления заявок в систему: "; cin >> lambda;
			cout << "Среднее время обслуживания: "; cin >> t; // Все переводи в часы!

			mu = 1 / t;
			cout << "Интенсивность обслуживания: " << mu << endl;

			cout << "Число каналов: "; cin >> n;
			cout << endl;

			if (n < 1)
			{
				cout << "Каналов не может быть меньше 1" << endl;
				return 0;
			}

			p = lambda / mu;
			cout << "Приведённая интенсивность потока: " << p << endl;

			for (int i = 0; i < n + 1; i++)
			{
				sum += pow(p, k) / fact(k);
				k++;
			}
			P0 = 1 / sum;
			k = 1;
			cout << "Вероятность того, что канал обслуживания свободен: " << P0 << endl << endl;

			for (int i = 0; i < n; i++)
			{
				Pk = (pow(p, k) / fact(k)) * P0;
				cout << "Вероятность того, что в системе находится " << k << " заявка: " << Pk << endl;
				k++;
			}
			cout << endl;

			Pn = (pow(p, n) / fact(n)) * P0;
			Potk = Pn;
			cout << "Вероятность отказа: " << Potk << endl;

			q = 1 - Potk;
			cout << "Вероятность того, что заявка будет принята к обслуживанию: " << q << endl << endl;

			A = lambda * q;
			cout << "Абсолютная пропускная способность: " << A << endl;

			inv_k = p * (1 - Potk);
			cout << "Среднее число каналов, занятых обслуживанием: " << inv_k << endl << endl;
		}
		break;

		case 5:
		{
			cout << "Рассмотрим многоканальную систему с ожиданием!" << endl << endl;

			cout << "Интенсивность поступления заявок в систему: "; cin >> lambda;
			cout << "Среднее время обслуживания: "; cin >> t; // Все переводи в часы!

			mu = 1 / t;
			cout << "Интенсивность обслуживания: " << mu << endl;

			cout << "Число каналов: "; cin >> n;
			cout << endl;

			if (n < 1)
			{
				cout << "Каналов не может быть меньше 1" << endl;
				return 0;
			}

			p = lambda / mu;
			cout << "Приведённая интенсивность потока: " << p << endl;

			C = n;
			while (C > 0)
			{
				sum += pow(p, k) / fact(k);
				k++;
				C--;
			}
			C = n;
			sum += pow(p, C) / (fact(C) * (1 - (p / C)));
			P0 = 1 / sum;
			cout << "Вероятность того, что канал обслуживания свободен: " << P0 << endl << endl;

			k = 1;
			for (int i = 0; i < n; i++)
			{
				Pn = (pow(p, k) / fact(k)) * P0;
				cout << "Вероятность того, что в системе находится " << k << " заявка: " << Pn << endl;
				k++;
			}
			cout << endl;

			q = 1;
			cout << "Относительная пропускная способность = доли обслуженных заявок: " << q << endl << endl; // 1, потому что все заявки, рано или поздно будут выполнены

			Pc = Pn; // Присваиваем конечную вероятность заявки

			Lq = ((C * p) / pow((C - p), 2)) * Pc;
			cout << "Среднее число клиентов в очереди на обслуживание: " << Lq << endl;

			Ls = Lq + p;
			cout << "Среднее число находящихся в системе заявок: " << Ls << endl;

			Wq = Lq / lambda;
			cout << "Средняя продолжительность пребывания клиента (заявки) в очереди: " << Wq << endl;

			Ws = Wq + (1 / mu);
			cout << "Среднее время пребывания заявки в системе: " << Ws << endl;
		}
		break;

	default:
		cout << "Выберите один из тех пунктов, которые представленны!" << endl;
		break;
	}

	system("pause");
	return 0;
}